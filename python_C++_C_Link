

/media/wangbin/G/GAN/GAN1.py



from ctypes import *  # cdll, c_int

lib = cdll.LoadLibrary('/media/wangbin/E/7.11/123/libmathBuf.so')


class callsubBuf(object):
    def __init__(self):
        self.obj = lib.subBuf_new()

    def callcursubBuf(self, data, num, outData):
        lib.subBuf_sub(self.obj, data, num, outData)

    def call_call(self, data1, x, y):
        lib.call_call_call(self.obj,data1, x, y)


callAddBuf = lib.addBuf

num = 4
numbytes = c_int(num)

data_in = (c_int32 * num)()
for i in range(num):
    data_in[i] = i

print("initial input data buf:")
for i in range(num):
    print(data_in[i])

# pdata_in = cast(data_in, POINTER(c_ubyte))
# pdata_in2 = cast(pdata_in, POINTER(c_ubyte*num))

data_out = (c_int32 * num)()

ret = callAddBuf(data_in, numbytes, data_out)

print("after call addBuf with C, output buf:")
for i in range(num):
    print(data_out[i])

f = callsubBuf()
f.callcursubBuf(data_in, numbytes, data_out)

print("after call cursubBuf with  C++ class, output buf:")
for i in range(num):
    print(data_out[i])


# 下部图像旋转一定角度
def rotate_bound(image, angle):
    # grab the dimensions of the image and then determine the
    # center
    (h, w) = image.shape[:2]
    (cX, cY) = (w // 2, h // 2)

    # grab the rotation matrix (applying the negative of the
    # angle to rotate clockwise), then grab the sine and cosine
    # (i.e., the rotation components of the matrix)
    M = cv2.getRotationMatrix2D((cX, cY), -angle, 1.0)
    cos = np.abs(M[0, 0])
    sin = np.abs(M[0, 1])

    # compute the new bounding dimensions of the image
    nW = int((h * sin) + (w * cos))
    nH = int((h * cos) + (w * sin))

    # adjust the rotation matrix to take into account translation
    M[0, 2] += (nW / 2) - cX
    M[1, 2] += (nH / 2) - cY

    # perform the actual rotation and return the image
    return cv2.warpAffine(image, M, (nW, nH))


# 解决中文路径读取不了的问题  返回的是cv2.imread(file_path)
def cv_imread(file_path):
    cv_img = cv2.imdecode(np.fromfile(file_path, dtype=np.int8), cv2.IMREAD_COLOR)
    return cv_img


import numpy as np
import cv2
import skimage
from skimage import color


# 读图片
def loadImage2(ima):
    im = cv_imread(ima)
    im = rotate_bound(im, -6)
    B, G, R = cv2.split(im)
    # im=R
    y = np.where(R == 0)
    # print(type(y))  #<class 'tuple'>
    y = y[1]
    # print(type(y))  #<class 'numpy.ndarray'>
    y.sort()
    z = y[(len(y) - 1) // 2]
    # 判断绿线位置
    # if z > R.shape[1] // 2 or z == R.shape[1] // 2:
    #     im = flip180(im)
    #     z = R.shape[1] - z - 2  # R.shape[1]-1 是最大列值 下标 z 49 maxline 199 则200-48-2=200-50
    #     # list_imrotate.append(num)
    #     R, G, B = cv2.split(im)  # B,G,R 对调了 图像旋转180
    #     imm = cv2.merge([R, G, B])
    # else:
    imm = cv2.merge([R, G, B])  # 此处写成 imm=im 就会出错
    imm = skimage.color.rgb2lab(imm)
    L, a, b = cv2.split(imm)

    aa = np.ones((a.shape[0], a.shape[1]))
    for i in range(0, a.shape[0]):
        for j in range(0, a.shape[1]):
            if (a[i][j] >= 10):
                aa[i][j] = 0
    bb = np.ones((a.shape[0] + 100, a.shape[1] + 100))
    for i in range(0, a.shape[0]):
        for j in range(0, a.shape[1]):
            if aa[i][j] == 0:
                bb[i + 50][j + 50] = 0

    data = bb
    return data


data = loadImage2("17102 副本.png")  # ,表示不同层
x, y = data.shape
# print(x,y)
l = []
for m in range(0, x):
    for i in data[m]:
        l.append(i)
# print(len(l))
s = len(l)
l1 = []
for i in range(0, s):
    l1.append(c_int32(int(l[i])))

data1 = (c_int32 * len(l))()
data2 = (c_int32 * len(l))()

for i in range(len(l)):
    data1[i] = l1[i]

# data = data.astype(np.int32)
# import os
# dst = os.path.join('/media/wangbin/E/7.11/123/data1.txt')
# np.savetxt(dst, data, fmt='%d', delimiter=',')

aa = lib.cal
bb = aa(x, y)

f1 = callsubBuf()
f1.call_call(data1,x, y)

# print(bb)
# print("I love china")
# print(data2[5])













/media/wangbin/E/7.11





main.cpp


//#include <iostream>
//
//using namespace std;
//
//int main()
//{
//    float* data_ptr;
//    data_ptr=new float[32];
//    for(int i=0; i<32; i++)
//        data_ptr[i]=i;
//    cout<<&data_ptr<<endl;
//}
//
//
//





#include <iostream>
#include <string.h>
#include "subBuf.h"
using namespace std;

extern "C"
{
//    void dfs(int a,int b);
    int addBuf(int* data, int num, int* outData);

    int cal(int* data,int num1,int num2);

    subBuf* subBuf_new()
    {
        return new subBuf();
    }
    int subBuf_sub(subBuf* subfuf, int* data, int num, int* outData)
    {
        subfuf->cursubBuf(data, num, outData);
    }

    int call_call_call(subBuf* subfuf,int* data, int x, int y)
    {
        subfuf->call(data, x, y);
    }

}

int addBuf(int* data, int num, int* outData)
{
    for (int i = 0; i < num; ++i)
    {
        outData[i] = data[i] + 3;
    }
    return num;
}









int cal(int* data,int x,int y)
{


}

//int main()
//{
//    FILE *fp1;
//    if((fp1=fopen("data1.txt","r"))==NULL)
//    {
//        printf("error occur");
//        exit(1);
//    }
//    memset(outData,0,sizeof(outData));
//    memset(data,0,sizeof(data));
//    int n=317,x=317;
//    int m=378,y=378;
////    for(int i=0; i<n; i++)
////    {
////        for(int j=0; j<m; j++)
////        {
////            fscanf(fp1,"%d,",&data[i][j]);
////        }
////    }
////    cout<<"I love china!\n";
//////    cal(data,n,m,outData);
////
////    int k=0;
////    for(int i=0; i<x; i++)
////    {
////        for(int j=0; j<y; j++)
////        {
////            vlaue[i][j]=data[i][j];
////        }
////    }
////
//////
//////    for(int i=0;i<x;i++)
//////    {
//////        for(int j=0;j<y;j++)
//////        {
//////        cout<<vlaue[i][j]<<"  ";
//////        }
//////        cout<<endl;
//////    }
////
////
////    int ff=0;
////    for(int j=0; j<y; j++)
////    {
//////            printf("I love you henan\n");
////        ff=0;
////        start=0;
////        for(int i=2; i<x; i++)
////        {
//////                printf("I love you huxian\n  %d\n",i);
////            if((vlaue[i-1][j]==1)&&(vlaue[i-2][j]==1)&&(vlaue[i+1][j]==0)&&(vlaue[i+2][j]==0)&&vlaue[i+20][j]==1)
////            {
////                ii1=i;
////                jj1=j;
////                dfs(i,j);
////                if(start<150)         //adjust arg  start<50
////                {
////                    bj=0;
////                    memset(step,0,sizeof(step));
////                    memset(node1,0,sizeof(node1));
////                    //add
////                    i+=20;
////                    continue;
////                    //
////
//////                            break;
////
////                }
////                ff=1;
////                break;
////            }
////        }
////        if(ff==1)
////            break;
////    }
//////    printf("%d %d\n",m,n);
//////    for(int i=0; i<m; i++)
//////    {
//////        for(int j=0; j<n; j++)
//////        {
//////            printf("%d ",vlaue[i][j]);
//////        }
//////        printf("\n");
//////    }
////    int start2;
////    start2=(start+1)/2-10;
////    cout<<"strat2="<<start2<<endl;
////    for(int i=0; i<start2; i++)
////    {
//////            if(node1[i].y==node1[0].y&&i+50>start)
//////            {
////////                printf("%d %d\n",node1[i].x,node1[i].y);
//////                node2[i].x=node1[i].x;
//////                node2[i].y=node1[i].y;
//////                start2=i;
//////                break;
//////            }
//////            printf("%d %d\n",node1[i].x,node1[i].y);
////        node2[i].x=node1[i].x;
////        node2[i].y=node1[i].y;
////    }
//////        for(int i=0;i<=start2;i++)
//////        {
//////            printf("%d %d\n",node2[i].x,node2[i].y);
//////        }
////    for(int i=0; i<start2; i++) //start2 finish value
////    {
////        if((node2[i+1].x-node2[i].x==0)&&(node2[i+1].y-node2[i].y!=0))
////            node2[i].xl=0;
////        if((node2[i+1].x-node2[i].x!=0)&&(node2[i+1].y-node2[i].y==0))
////            node2[i].xl=1;
//////        printf("%d %d %f\n",node2[i].x,node2[i].y,node2[i].xl);
////    }
////    for(int i=0; i<start2; i++)
////    {
////        for(int j=i+1; j<=i+5; j++)
////        {
////            if((node2[i].x!=node2[j].x)&&(node2[i].y!=node2[j].y))
////            {
//////                node2[i].xl=float(float(node2[i].y-node2[j].y)/float(node2[i].x-node2[j].x));
//////                for(int k=i+1;k<=j-1;k++)
//////                    node2[k].xl=node2[i].xl;
////                node2[i].xl=float(float(node2[i].y-node2[j].y)/float(node2[i].x-node2[j].x));
////                i=j;
////                break;
////            }
////        }
////    }
//////        for(int i=0; i<=start; i++)
//////        {
//////            if(node2[i].xl==0&&i+50>start)
//////            {
//////                node2[i].xl=node2[0].xl;
//////            }
//////        }
////    for(int i=0; i<start2; i++)
////    {
////        node2[i].alter=node2[i+1].xl-node2[i].xl;
////        if(node2[i].alter>=-5.5&&node2[i].alter<-4.5)
////            node2[i].ch1='a';
////        if(node2[i].alter>=-4.5&&node2[i].alter<-3.5)
////            node2[i].ch1='b';
////        else if(node2[i].alter>=-3.5&&node2[i].alter<-2.5)
////            node2[i].ch1='c';
////        else if(node2[i].alter>=-2.5&&node2[i].alter<-1.5)
////            node2[i].ch1='d';
////        else if(node2[i].alter>=-1.5&&node2[i].alter<-0.5)
////            node2[i].ch1='e';
////        else if(node2[i].alter>=-0.5&&node2[i].alter<0.5)
////            node2[i].ch1='f';
////        else if(node2[i].alter>=0.5&&node2[i].alter<1.5)
////            node2[i].ch1='g';
////        else if(node2[i].alter>=1.5&&node2[i].alter<2.5)
////            node2[i].ch1='h';
////        else if(node2[i].alter>=2.5&&node2[i].alter<3.5)
////            node2[i].ch1='i';
////        else if(node2[i].alter>=3.5&&node2[i].alter<4.5)
////            node2[i].ch1='j';
////        else if(node2[i].alter>=4.5&&node2[i].alter<5.5)
////            node2[i].ch1='k';
//////            else
//////                node2[i].ch1='k';
////    }
////    for(int i=0; i<start2; i++)
////    {
////        if(node2[i].alter==0)
////            node2[i].ch2='C';
////        if(node2[i].alter>0&&node2[i].alter<=3)
////            node2[i].ch2='D';
////        if(node2[i].alter>3)
////            node2[i].ch2='E';
////        if(node2[i].alter<0&&node2[i].alter>=-3)
////            node2[i].ch2='B';
////        if(node2[i].alter<-3)
////            node2[i].ch2='A';
////    }
////
////
////    for(int i=0; i<start2-1; i++)
////    {
////        if((node2[i].y>node2[i+1].y)&&(i+20>start2))
////        {
////            start2=i;
////            break;
////        }
////    }
////
////    for(int i=0; i<start2-5; i++)
////    {
//////        printf("%f %f %f %f %c %c\n",node2[i].x,node2[i].y,node2[i].xl,node2[i].alter,node2[i].ch1,node2[i].ch2);
////        printf("%f %f %f %f %c %c\n",node2[i].x,node2[i].y,node2[i].xl,node2[i].alter,node2[i].ch1,node2[i].ch2);
//////        outData[i]=node2[i].x;
////    }
////
//
//}
//
//









//int main()
//{
//    subBuf a=subBuf();
//    int data_in[10]={0,1,2,3,4,5,6,7,8,9};
//    cout<<"data_in"<<data_in[0]<<endl;
//    int num=10;
//    int data_out[10];
//    a.cursubBuf(data_in,num,data_out);
//}



















subBuf.h




#include <iostream>
using namespace std;





int data[500][500];
int outData[500][500];


//Definition 1
int vlaue[500][500];  //5000*5000
int step1[500][500]; //5000*5000
int ii1,jj1;
struct node
{
    float x;
    float y;
    float xl;
    float alter;
    char ch1;
    char ch2;
} node1[1000],node2[1000];
int start=0;
int files;
int bj;



void dfs(int a,int b)
{
    cout<<a<<"   "<<b<<endl;
    cout<<step1[0][0]<<endl;
    if(bj==1)
    {
        return;
    }
    cout<<step1[a][b]<<endl;
    if(step1[a][b]==1)
        return;
    cout<<a<<"   "<<b<<endl;
//    if(f!=0&&(a!=node1[start].x&&b!=node1[start].y))
//        return;
    cout<<a<<"   "<<b<<endl;
    int next1[4][2]= {{-1,0},{0,1},{1,0},{0,-1}};
    cout<<" *** "<<endl;
    int next2[8][2]= {{-1,-1},{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1},{0,-1}};

    node1[start].x=a;
    node1[start++].y=b;
//    printf("%d %d %d %d\n",a,b,ii1,jj1);

    if(a==ii1&&b==jj1-1)
    {
//            printf("\n<*><*><*><*> <*><*><*><*>\n");
        bj=1;
        return;
    }
    step1[a][b]=1;
    int x1,y1;
    int x2,y2;
    for(int i=0; i<4; i++)
    {
        x1=a+next1[i][0];
        y1=b+next1[i][1];
        if(step1[x1][y1]!=1&&(vlaue[x1][y1]==1))
        {
            for(int j=0; j<8; j++)
            {
                x2=x1+next2[j][0];
                y2=y1+next2[j][1];
                if(vlaue[x2][y2]==0)
                {
                    dfs(x1,y1);
                    break;
                }
            }
        }
    }
    return;
}



class subBuf
{
public:
    subBuf() {}
    int cursubBuf(int* data, int num, int* outData)
    {
        for (int i = 0; i < num; ++i)
        {
            outData[i] = data[i] - 5;
        }
        return num;
    }
    int call(int* data,int x,int y)
    {
        cout<<vlaue[x][y]<<endl;
        cout<<step1[x][y]<<endl;
//    int i=0;
//    for(int i=0; i<x*y; i++)
//        outData[i]=data[i]+100;
        int k=0;
        for(int i=0; i<x; i++)
        {
            for(int j=0; j<y; j++)
            {
                vlaue[i][j]=data[k++];
            }
        }

//
//    for(int i=0;i<x;i++)
//    {
//        for(int j=0;j<y;j++)
//        {
//        cout<<vlaue[i][j]<<"  ";
//        }
//        cout<<endl;
//    }


        int ff=0;
        for(int j=0; j<y; j++)
        {
//            printf("I love you henan\n");
            ff=0;
            start=0;
            for(int i=2; i<x; i++)
            {
//                printf("I love you huxian\n  %d\n",i);
                if((vlaue[i-1][j]==1)&&(vlaue[i-2][j]==1)&&(vlaue[i+1][j]==0)&&(vlaue[i+2][j]==0)&&vlaue[i+20][j]==1)
                {
                    ii1=i;
                    jj1=j;
                    cout<<step1[i][j]<<endl;
                    memset(step1,0,sizeof(step1));
                    memset(node1,0,sizeof(node1));
                    dfs(i,j);
                    if(start<150)         //adjust arg  start<50
                    {
                        bj=0;
                        memset(step1,0,sizeof(step1));
                        memset(node1,0,sizeof(node1));
                        //add
                        i+=20;
                        continue;
                        //

//                            break;

                    }
                    ff=1;
                    break;
                }
            }
            if(ff==1)
                break;
        }
//    printf("%d %d\n",m,n);
//    for(int i=0; i<m; i++)
//    {
//        for(int j=0; j<n; j++)
//        {
//            printf("%d ",vlaue[i][j]);
//        }
//        printf("\n");
//    }
        int start2;
        start2=(start+1)/2-10;
        cout<<"strat2="<<start2<<endl;
        for(int i=0; i<start2; i++)
        {
//            if(node1[i].y==node1[0].y&&i+50>start)
//            {
////                printf("%d %d\n",node1[i].x,node1[i].y);
//                node2[i].x=node1[i].x;
//                node2[i].y=node1[i].y;
//                start2=i;
//                break;
//            }
//            printf("%d %d\n",node1[i].x,node1[i].y);
            node2[i].x=node1[i].x;
            node2[i].y=node1[i].y;
        }
//        for(int i=0;i<=start2;i++)
//        {
//            printf("%d %d\n",node2[i].x,node2[i].y);
//        }
        for(int i=0; i<start2; i++) //start2 finish value
        {
            if((node2[i+1].x-node2[i].x==0)&&(node2[i+1].y-node2[i].y!=0))
                node2[i].xl=0;
            if((node2[i+1].x-node2[i].x!=0)&&(node2[i+1].y-node2[i].y==0))
                node2[i].xl=1;
//        printf("%d %d %f\n",node2[i].x,node2[i].y,node2[i].xl);
        }
        for(int i=0; i<start2; i++)
        {
            for(int j=i+1; j<=i+5; j++)
            {
                if((node2[i].x!=node2[j].x)&&(node2[i].y!=node2[j].y))
                {
//                node2[i].xl=float(float(node2[i].y-node2[j].y)/float(node2[i].x-node2[j].x));
//                for(int k=i+1;k<=j-1;k++)
//                    node2[k].xl=node2[i].xl;
                    node2[i].xl=float(float(node2[i].y-node2[j].y)/float(node2[i].x-node2[j].x));
                    i=j;
                    break;
                }
            }
        }
//        for(int i=0; i<=start; i++)
//        {
//            if(node2[i].xl==0&&i+50>start)
//            {
//                node2[i].xl=node2[0].xl;
//            }
//        }
        for(int i=0; i<start2; i++)
        {
            node2[i].alter=node2[i+1].xl-node2[i].xl;
            if(node2[i].alter>=-5.5&&node2[i].alter<-4.5)
                node2[i].ch1='a';
            if(node2[i].alter>=-4.5&&node2[i].alter<-3.5)
                node2[i].ch1='b';
            else if(node2[i].alter>=-3.5&&node2[i].alter<-2.5)
                node2[i].ch1='c';
            else if(node2[i].alter>=-2.5&&node2[i].alter<-1.5)
                node2[i].ch1='d';
            else if(node2[i].alter>=-1.5&&node2[i].alter<-0.5)
                node2[i].ch1='e';
            else if(node2[i].alter>=-0.5&&node2[i].alter<0.5)
                node2[i].ch1='f';
            else if(node2[i].alter>=0.5&&node2[i].alter<1.5)
                node2[i].ch1='g';
            else if(node2[i].alter>=1.5&&node2[i].alter<2.5)
                node2[i].ch1='h';
            else if(node2[i].alter>=2.5&&node2[i].alter<3.5)
                node2[i].ch1='i';
            else if(node2[i].alter>=3.5&&node2[i].alter<4.5)
                node2[i].ch1='j';
            else if(node2[i].alter>=4.5&&node2[i].alter<5.5)
                node2[i].ch1='k';
//            else
//                node2[i].ch1='k';
        }
        for(int i=0; i<start2; i++)
        {
            if(node2[i].alter==0)
                node2[i].ch2='C';
            if(node2[i].alter>0&&node2[i].alter<=3)
                node2[i].ch2='D';
            if(node2[i].alter>3)
                node2[i].ch2='E';
            if(node2[i].alter<0&&node2[i].alter>=-3)
                node2[i].ch2='B';
            if(node2[i].alter<-3)
                node2[i].ch2='A';
        }


        for(int i=0; i<start2-1; i++)
        {
            if((node2[i].y>node2[i+1].y)&&(i+20>start2))
            {
                start2=i;
                break;
            }
        }

        for(int i=0; i<start2-5; i++)
        {
//        printf("%f %f %f %f %c %c\n",node2[i].x,node2[i].y,node2[i].xl,node2[i].alter,node2[i].ch1,node2[i].ch2);
            printf("%f %f %f %f %c %c\n",node2[i].x,node2[i].y,node2[i].xl,node2[i].alter,node2[i].ch1,node2[i].ch2);
//        outData[i]=node2[i].x;
        }
    }
};








